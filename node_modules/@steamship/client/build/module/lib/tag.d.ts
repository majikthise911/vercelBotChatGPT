import { IApiBase } from './shared/BaseInterfaces.js';
import { Configuration } from './shared/Configuration.js';
import { Task } from './task.js';
export interface TagList {
    tags: Tag[];
}
export interface TagParams {
    id?: string;
    workspaceId?: string;
    fileId?: string;
    blockId?: string;
    startIdx?: number;
    endIdx?: number;
    kind: string;
    name?: string;
    value?: any;
    text?: string;
    createdAt?: string;
    updatedAt?: string;
}
export interface UploadParams {
    fileId?: string;
    blockId?: string;
    startIdx?: number;
    endIdx?: number;
    kind: string;
    name?: string;
    value?: any;
    text?: string;
}
export declare class Tag {
    id?: string;
    fileId?: string;
    blockId?: string;
    workspaceId?: string;
    startIdx?: number;
    endIdx?: number;
    kind: string;
    name?: string;
    value?: any;
    text?: string;
    createdAt?: string;
    updatedAt?: string;
    client: IApiBase;
    constructor(client: IApiBase, params: TagParams);
    static create(client: IApiBase, params: UploadParams, config?: Configuration): Promise<Task<Tag>>;
    delete(config?: Configuration): Promise<Task<Tag>>;
    static query(client: IApiBase, tagFilterQuery: string, config?: Configuration): Promise<Task<TagList>>;
}
