import { IApiBase } from './shared/BaseInterfaces.js';
import { Configuration } from './shared/Configuration.js';
import { Task } from './task.js';
export interface GetParams {
    id?: string;
    handle?: string;
    pluginHandle?: string;
}
export interface PluginInstanceListParams {
    pluginId?: string;
    pluginVersionId?: string;
    includeWorkspace?: boolean;
    acrossWorkspaces?: boolean;
}
export interface PluginInstanceList {
    pluginInstances: PluginInstance[];
}
export interface PluginInstanceParams {
    id?: string;
    handle?: string;
    pluginId?: string;
    pluginHandle?: string;
    pluginInstanceId?: string;
    pluginVersionHandle?: string;
    pluginVersionId?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    userId?: string;
    userHandle?: string;
    workspaceId?: string;
    workspaceHandle?: string;
    config?: Record<string, any>;
}
export interface CreatePluginInstance {
    id?: string;
    handle?: string;
    pluginId?: string;
    pluginHandle?: string;
    pluginVersionId?: string;
    pluginVersionHandle?: string;
    workspaceId?: string;
    fetchIfExists?: boolean;
    config?: Record<string, any>;
}
export declare class PluginInstance {
    id?: string;
    handle?: string;
    pluginId?: string;
    pluginHandle?: string;
    pluginVersionId?: string;
    pluginVersionHandle?: string;
    workspaceId?: string;
    workspaceHandle?: string;
    userId?: string;
    userHandle?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    client: IApiBase;
    config?: Record<string, any>;
    constructor(client: IApiBase, params: PluginInstanceParams);
    static create(client: IApiBase, params: CreatePluginInstance, config?: Configuration): Promise<Task<PluginInstance>>;
    static get(client: IApiBase, params?: GetParams, config?: Configuration): Promise<Task<PluginInstance>>;
    static list(client: IApiBase, params?: PluginInstanceListParams, config?: Configuration): Promise<Task<PluginInstanceList>>;
    delete(config?: Configuration): Promise<Task<PluginInstance>>;
}
