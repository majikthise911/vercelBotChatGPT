import { IApiBase, ITask, TaskList, TaskListParams } from './shared/BaseInterfaces.js';
import { Configuration } from './shared/Configuration.js';
import { TaskParams, TaskState } from './types/base.js';
import { AddTaskCommentRequest, DeleteTaskCommentRequest, ListTaskCommentResponse, TaskCommentResponse } from './types/task_comment.js';
export declare class Task<T> implements TaskParams<T>, ITask<T> {
    client: IApiBase;
    taskId?: string;
    userId?: string;
    workspaceId?: string;
    version?: string;
    name?: string;
    input?: string;
    output?: T;
    maxRetries?: number;
    retries?: number;
    state?: TaskState;
    statusMessage?: string;
    statusCode?: string;
    statusSuggestion?: string;
    taskCreatedOn?: string;
    taskLastModifiedOn?: string;
    taskExecutor?: string;
    taskType?: string;
    assignedWorker?: string;
    startedAt?: string;
    responsePath?: string;
    rawResponse?: boolean;
    objectConstructor?: (client: IApiBase, data: unknown) => T;
    constructor(client: IApiBase, params?: TaskParams<T>);
    static list(client: IApiBase, params?: TaskListParams, config?: Configuration): Promise<Task<TaskList>>;
    update(params?: TaskParams<T>): ITask<T>;
    setData(data?: any): void;
    completed(): boolean;
    failed(): boolean;
    wait(params?: {
        maxTimeoutSeconds?: number;
        retryDelaySeconds?: number;
    }): Promise<Task<T>>;
    check(): Promise<Task<T> | undefined>;
    addComment(params: AddTaskCommentRequest): Promise<Task<TaskCommentResponse>>;
    listComments(): Promise<Task<ListTaskCommentResponse>>;
    deleteComment(params: DeleteTaskCommentRequest): Promise<Task<TaskCommentResponse>>;
}
