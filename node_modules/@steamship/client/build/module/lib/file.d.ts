/// <reference types="node" resolution-mode="require"/>
import { Block, BlockParams } from './block.js';
import { AllowedFileTypes, IApiBase } from './shared/BaseInterfaces.js';
import { Configuration } from './shared/Configuration.js';
import { GetParams } from './shared/Requests.js';
import { Tag, TagParams } from './tag.js';
import { Task } from './task.js';
export declare function readFile(filename: string): Promise<Buffer>;
export interface FileList {
    files: File[];
}
export interface FileParams {
    id?: string;
    handle?: string;
    mimeType?: string;
    workspaceId?: string;
    tenantId?: string;
    userId?: string;
    blocks?: BlockParams[] | Block[];
    tags?: TagParams[] | Tag[];
}
export interface UploadParams {
    filename?: string;
    content?: AllowedFileTypes;
    type?: 'file' | 'url' | 'value';
    tags?: TagParams[];
    handle?: string;
    mimeType?: string;
    workspaceId?: string;
}
export declare class File {
    id?: string;
    handle?: string;
    mimeType?: string;
    userId?: string;
    workspaceId?: string;
    blocks?: Block[];
    tags?: Tag[];
    client: IApiBase;
    constructor(client: IApiBase, params: FileParams);
    static create(client: IApiBase, params: UploadParams, config?: Configuration): Promise<Task<File>>;
    static upload(client: IApiBase, params: UploadParams, config?: Configuration): Promise<Task<File>>;
    delete(config?: Configuration): Promise<Task<File>>;
    raw(config?: Configuration): Promise<any>;
    clear(config?: Configuration): Promise<Task<File>>;
    static list(client: IApiBase, params?: GetParams, config?: Configuration): Promise<Task<FileList>>;
    static query(client: IApiBase, tagFilterQuery: string, config?: Configuration): Promise<Task<FileList>>;
    static get(client: IApiBase, params?: GetParams, config?: Configuration): Promise<Task<File>>;
}
