import { ApiBase } from './api_base.js';
import { PackageInstance } from './package_instance.js';
import { PluginInstance } from './plugin_instance.js';
import { LoadConfigParams } from './shared/Configuration.js';
import { Task } from './task.js';
import { CreateLoginAttemptResponse } from './types/account.js';
export declare class Steamship extends ApiBase {
    constructor(config?: LoadConfigParams);
    /**
     * Create a login attempt token, useful for logging in a client from the CLI
     * @returns A response object with a "token" field
     */
    createLoginAttempt(): Promise<Task<CreateLoginAttemptResponse>>;
    /**
     * Creates/loads an instance of package `packageHandle`.
     *
     * The instance is named `instanceHandle` and located in the Workspace named
     * `instanceHandle`.
     *
     * For example, one may write the following to always get back the same package
     * instance, no matter how many times you run it, scoped into its own workspace:
     *
     * ```javascript
     * let package = Steamship.use('package-handle', 'instance-handle')
     * ```
     *
     * If you wish to override the usage of a workspace named `instanceHandle`,
     * you can provide the `workspaceHandle` parameter.
     *
     * @param packageHandle - The package to use
     * @param instanceHandle - The identifier for your instance and its state
     * @param config - A config object parameterizing this package instance
     * @param version - Optional version handle
     * @param reuse - Whether to reuse the existing instance by the provided handle if it exists. Default: true
     * @param workspaceHandle - The workspace to create/use in which this instance should exist. Defaults to `instanceHandle`
     *
     * @returns PackageInstance
     */
    static use(packageHandle: string, instanceHandle?: string, config?: Record<string, unknown>, version?: string, reuse?: boolean, workspaceHandle?: string): Promise<PackageInstance>;
    /**
     * Creates/loads an instance of package `packageHandle`.
     * The instance is named `instanceHandle` and located in the workspace this
     * client is anchored to instanceHandle."""
     * @returns PackageInstance
     */
    use(packageHandle: string, instanceHandle?: string, config?: Record<string, unknown>, version?: string, reuse?: boolean): Promise<PackageInstance>;
    /**
     * Creates/loads an instance of plugin `pluginHandle`.
     *
     * The instance is named `instanceHandle` and located in the Workspace named `instanceHandle`.
     *
     * For example, one may write the following to always get back the same package instance, no matter how many
     * times you run it, scoped into its own workspace:
     *
     * ```javascript
     * let plugin = Steamship.usePlugin('plugin-handle', 'instance-handle')
     * ```
     *
     * If you wish to override the usage of a workspace named `instanceHandle`,
     * you can provide the `workspaceHandle` parameter.
     * @returns PluginInstance
     */
    static usePlugin(pluginHandle: string, instanceHandle?: string, config?: Record<string, unknown>, version?: string, reuse?: boolean, workspaceHandle?: string): Promise<PluginInstance>;
    /**
     * Creates/loads an instance of plugin `pluginHandle`.
     * The instance is named `instanceHandle` and located in the workspace this
     * client is anchored to instanceHandle."""
     * @returns PluginInstance
     */
    usePlugin(pluginHandle: string, instanceHandle?: string, config?: Record<string, unknown>, version?: string, reuse?: boolean): Promise<PluginInstance>;
}
