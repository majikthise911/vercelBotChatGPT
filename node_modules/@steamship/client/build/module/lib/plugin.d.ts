import { IApiBase } from './shared/BaseInterfaces.js';
import { Configuration } from './shared/Configuration.js';
import { GetParams } from './shared/Requests.js';
import { Task } from './task.js';
export type PluginType = 'fileImporter' | 'corpusImporter' | 'corpusExporter' | 'blockifier' | 'tagger' | 'embedder' | 'exporter';
export type PluginTransport = 'jsonOverHttp';
export type TrainingPlatform = 'ecs' | 'lambda';
export interface PluginParams {
    id?: string;
    type?: PluginType;
    url?: string;
    userId?: string;
    transport?: PluginTransport;
    isPublic?: boolean;
    isTrainable?: boolean;
    trainingPlatform?: TrainingPlatform;
    handle?: string;
    description?: string;
    dimensionality?: number;
    limitAmount?: number;
    limitUnit?: string;
    apiKey?: string;
    metadata?: unknown;
    readme?: string;
    profile?: any;
    featured?: boolean;
}
export interface ListPluginParams {
    featured?: boolean;
    public?: boolean;
    type?: PluginType;
}
export interface PluginList {
    plugins?: Plugin[];
}
export interface CreatePluginParams {
    type?: PluginType;
    url?: string;
    transport?: PluginTransport;
    isPublic?: boolean;
    isTrainable?: boolean;
    trainingPlatform?: TrainingPlatform;
    handle?: string;
    description?: string;
    dimensionality?: number;
    limitAmount?: number;
    limitUnit?: string;
    apiKey?: string;
    metadata?: unknown;
    fetchIfExists?: boolean;
    workspaceId?: string;
    workspaceHandle?: string;
    readme?: string;
    profile?: any;
}
export interface UpdatePluginParams {
    id?: string;
    handle?: string;
    readme?: string;
    profile?: any;
    description?: string;
}
export declare class Plugin {
    id?: string;
    type?: PluginType;
    url?: string;
    transport?: PluginTransport;
    isPublic?: boolean;
    isTrainable?: boolean;
    userId?: string;
    trainingPlatform?: TrainingPlatform;
    handle?: string;
    profile?: any;
    readme?: string;
    description?: string;
    dimensionality?: number;
    limitAmount?: number;
    limitUnit?: string;
    apiKey?: string;
    featured?: boolean;
    metadata?: unknown;
    client: IApiBase;
    constructor(client: IApiBase, params: PluginParams);
    static create(client: IApiBase, params: CreatePluginParams, config?: Configuration): Promise<Task<Plugin>>;
    static get(client: IApiBase, params?: GetParams, config?: Configuration): Promise<Task<Plugin>>;
    static list(client: IApiBase, params?: ListPluginParams, config?: Configuration): Promise<Task<PluginList>>;
    update(config?: Configuration): Promise<Task<Plugin>>;
}
