import { IApiBase } from './shared/BaseInterfaces.js';
import { Configuration } from './shared/Configuration.js';
import { Task } from './task.js';
export interface GetParams {
    id?: string;
    handle?: string;
    pluginId?: string;
}
export interface PluginVersionListParams {
    pluginId?: string;
}
export interface PluginVersionList {
    pluginVersions: PluginVersion[];
}
export interface PluginVersionParams {
    id?: string;
    handle?: string;
    pluginId?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    isDefault?: boolean;
    configTemplate?: Record<string, any>;
}
export interface CreateParams {
    filename: string;
    pluginId: string;
    handle?: string;
    configTemplate?: Record<string, any>;
}
export declare class PluginVersion {
    id?: string;
    handle?: string;
    pluginId?: string;
    createdAt?: string;
    updatedAt?: string;
    isDefault?: boolean;
    description?: string;
    client: IApiBase;
    configTemplate?: Record<string, any>;
    constructor(client: IApiBase, params: PluginVersionParams);
    static create(client: IApiBase, params: CreateParams, config?: Configuration): Promise<Task<PluginVersion>>;
    static get(client: IApiBase, params?: GetParams, config?: Configuration): Promise<Task<PluginVersion>>;
    static list(client: IApiBase, params?: PluginVersionListParams, config?: Configuration): Promise<Task<PluginVersionList>>;
    delete(config?: Configuration): Promise<Task<PluginVersion>>;
}
