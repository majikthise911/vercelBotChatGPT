import { IApiBase } from './shared/BaseInterfaces.js';
import { Configuration } from './shared/Configuration.js';
import { GetParams } from './shared/Requests.js';
import { Task } from './task.js';
export interface PackageList {
    packages: Package[];
}
export interface ListPackageParams {
    featured?: boolean;
    public?: boolean;
}
export interface PackageParams {
    id?: string;
    handle?: string;
    userId?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    isPublic?: boolean;
    fetchIfExists?: boolean;
    readme?: string;
    profile?: any;
    featured?: boolean;
}
export interface UpdatePackageParams {
    id?: string;
    handle?: string;
    readme?: string;
    profile?: any;
    description?: string;
}
export declare class Package {
    id?: string;
    handle?: string;
    description?: string;
    profile?: any;
    readme?: string;
    isPublic?: boolean;
    userId?: string;
    userHandle?: string;
    createdAt?: string;
    updatedAt?: string;
    featured?: boolean;
    client: IApiBase;
    constructor(client: IApiBase, params: PackageParams);
    static create(client: IApiBase, params?: PackageParams, config?: Configuration): Promise<Task<Package>>;
    static get(client: IApiBase, params?: GetParams, config?: Configuration): Promise<Task<Package>>;
    update(config?: Configuration): Promise<Task<Package>>;
    static list(client: IApiBase, params?: ListPackageParams, config?: Configuration): Promise<Task<PackageList>>;
}
