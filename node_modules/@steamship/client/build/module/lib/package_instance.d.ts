import { IApiBase, Verb } from './shared/BaseInterfaces.js';
import { Configuration } from './shared/Configuration.js';
import { Task } from './task.js';
export interface GetParams {
    id?: string;
    handle?: string;
    packageHandle?: string;
}
export interface PackageInstanceListParams {
    packageId?: string;
    packageVersionId?: string;
    includeWorkspace?: boolean;
    acrossWorkspaces?: boolean;
}
export interface PackageInstanceList {
    packageInstances: PackageInstance[];
}
export interface PackageInstanceParams {
    id?: string;
    handle?: string;
    packageId?: string;
    packageHandle?: string;
    packageInstanceId?: string;
    packageVersionId?: string;
    packageVersionHandle?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    userId?: string;
    userHandle?: string;
    workspaceId?: string;
    workspaceHandle?: string;
    invocationURL?: string;
    config?: Record<string, any>;
}
export interface CreatePackageInstance {
    id?: string;
    handle?: string;
    packageId?: string;
    packageHandle?: string;
    packageVersionId?: string;
    packageVersionHandle?: string;
    workspaceId?: string;
    fetchIfExists?: boolean;
    config?: Record<string, any>;
}
export declare class PackageInstance {
    id?: string;
    handle?: string;
    packageId?: string;
    packageHandle?: string;
    packageVersionId?: string;
    packageVersionHandle?: string;
    workspaceId?: string;
    workspaceHandle?: string;
    userId?: string;
    userHandle?: string;
    description?: string;
    createdAt?: string;
    updatedAt?: string;
    client: IApiBase;
    invocationURL?: string;
    config?: Record<string, any>;
    constructor(client: IApiBase, params: PackageInstanceParams);
    static create(client: IApiBase, params: CreatePackageInstance, config?: Configuration): Promise<Task<PackageInstance>>;
    static get(client: IApiBase, params?: GetParams, config?: Configuration): Promise<Task<PackageInstance>>;
    static list(client: IApiBase, params?: PackageInstanceListParams, config?: Configuration): Promise<Task<PackageInstanceList>>;
    delete(config?: Configuration): Promise<Task<PackageInstance>>;
    private loadMissingWorkspaceHandle;
    /**
     * Invokes a method on a Package, to be run in the cloud.
     *
     * @param path - The method name (HTTP path) being invoked. E.g. `greet`
     * @param params - A dictionary of parameters to provide to the method
     * @param verb? - An optional HTTP verb, either GET or POST. Default: POST.
     * @param responseType? - An optional argument for Axios response encoding
     * @returns unknown - Depends upon method implementation
     */
    invoke(path: string, params?: Record<string, unknown>, verb?: Verb, responseType?: undefined | 'blob' | 'arraybuffer'): Promise<unknown>;
    /**
     * Schedules the invocation of a method on a Package, to be run in the cloud.
     *
     * @param path - The method name (HTTP path) being invoked. E.g. `greet`
     * @param params - A dictionary of parameters to provide to the method
     * @param verb? - An optional HTTP verb, either GET or POST. Default: POST.
     * @param responseType? - An optional argument for Axios response encoding
     * @returns Task - A task representing the eventual response of the method
     */
    invokeAsync(path: string, params?: Record<string, unknown>, verb?: Verb): Promise<Task<unknown>>;
    /**
     * Returns the HTTP invocation URL for a method a Package, to be run in the cloud.
     *
     * @param path - The method name (HTTP path) being invoked. E.g. `greet`
     * @returns string
     */
    invocationUrl(path: string): Promise<string>;
}
