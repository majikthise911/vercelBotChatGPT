import { AxiosResponse } from 'axios';
import { IApiBase, ITask, PostConfig, SwitchWorkspaceParams, Verb } from './shared/BaseInterfaces.js';
import { Configuration, LoadConfigParams } from './shared/Configuration.js';
import { Task } from './task.js';
export interface SwitchConfigWorkspaceParams {
    workspaceHandle?: string;
    failIfWorkspaceExists?: boolean;
    config: Configuration;
}
export declare class ApiBase implements IApiBase {
    config: Promise<Configuration> | Configuration;
    constructor(params?: LoadConfigParams);
    switchWorkspace(params?: SwitchWorkspaceParams): Promise<void>;
    _switchConfigWorkspace(params: SwitchConfigWorkspaceParams): Promise<Configuration>;
    _headers<T>(config: Configuration, postConfig?: PostConfig<T>): {
        [name: string]: string;
    };
    _url<T>(baseConfig: Configuration, postConfig?: PostConfig<T>, operation?: string): string;
    post<T>(operation: string, payload: unknown, config?: PostConfig<T>, overrideConfig?: Configuration): Promise<AxiosResponse | ITask<T>>;
    get<T>(operation: string, payload: unknown, config?: PostConfig<T>): Promise<AxiosResponse | ITask<T>>;
    _makeError<T>({ error, response, task, }: {
        error?: Error;
        response?: AxiosResponse;
        task?: ITask<T>;
    }): Promise<Error>;
    _makeResponse<T>({ response, rawResponse, objectConstructor, responsePath, }: {
        response: AxiosResponse;
        rawResponse?: boolean;
        responsePath?: string;
        objectConstructor?: (client: any, data: any) => T;
    }): Promise<Task<T> | AxiosResponse>;
    call<T>(verb: Verb, operation: string, payload: unknown, config?: PostConfig<T>, overrideConfig?: Configuration): Promise<AxiosResponse | Task<T>>;
}
