"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Steamship = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));
var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));
var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));
var _api_base = require("./api_base.js");
var _log = _interopRequireDefault(require("./log.js"));
var _package_instance = require("./package_instance.js");
var _plugin_instance = require("./plugin_instance.js");
var _steamship_error = require("./steamship_error.js");
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
var log = (0, _log["default"])('Steamship');
var Steamship = /*#__PURE__*/function (_ApiBase) {
  (0, _inherits2["default"])(Steamship, _ApiBase);
  var _super = _createSuper(Steamship);
  function Steamship(config) {
    (0, _classCallCheck2["default"])(this, Steamship);
    return _super.call(this, config);
  }

  /**
   * Create a login attempt token, useful for logging in a client from the CLI
   * @returns A response object with a "token" field
   */
  (0, _createClass2["default"])(Steamship, [{
    key: "createLoginAttempt",
    value: function () {
      var _createLoginAttempt = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee() {
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              _context.next = 2;
              return this.post('account/create_login_attempt', {});
            case 2:
              return _context.abrupt("return", _context.sent);
            case 3:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function createLoginAttempt() {
        return _createLoginAttempt.apply(this, arguments);
      }
      return createLoginAttempt;
    }()
    /**
     * Creates/loads an instance of package `packageHandle`.
     *
     * The instance is named `instanceHandle` and located in the Workspace named
     * `instanceHandle`.
     *
     * For example, one may write the following to always get back the same package
     * instance, no matter how many times you run it, scoped into its own workspace:
     *
     * ```javascript
     * let package = Steamship.use('package-handle', 'instance-handle')
     * ```
     *
     * If you wish to override the usage of a workspace named `instanceHandle`,
     * you can provide the `workspaceHandle` parameter.
     *
     * @param packageHandle - The package to use
     * @param instanceHandle - The identifier for your instance and its state
     * @param config - A config object parameterizing this package instance
     * @param version - Optional version handle
     * @param reuse - Whether to reuse the existing instance by the provided handle if it exists. Default: true
     * @param workspaceHandle - The workspace to create/use in which this instance should exist. Defaults to `instanceHandle`
     *
     * @returns PackageInstance
     */
  }, {
    key: "use",
    value:
    /**
     * Creates/loads an instance of package `packageHandle`.
     * The instance is named `instanceHandle` and located in the workspace this
     * client is anchored to instanceHandle."""
     * @returns PackageInstance
     */
    function () {
      var _use = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2(packageHandle, instanceHandle, config, version, reuse) {
        var fixedInstanceHandle, response;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              fixedInstanceHandle = instanceHandle || packageHandle;
              if (typeof reuse == 'undefined') {
                reuse = true;
              }
              _context2.next = 4;
              return _package_instance.PackageInstance.create(this, {
                handle: fixedInstanceHandle,
                packageHandle: packageHandle,
                packageVersionHandle: version,
                fetchIfExists: reuse,
                config: config
              });
            case 4:
              response = _context2.sent;
              if (response.output) {
                _context2.next = 7;
                break;
              }
              throw new _steamship_error.SteamshipError({
                statusMessage: 'Unable to create an instance of your package -- an empty object was returned.'
              });
            case 7:
              return _context2.abrupt("return", response.output);
            case 8:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function use(_x, _x2, _x3, _x4, _x5) {
        return _use.apply(this, arguments);
      }
      return use;
    }()
    /**
     * Creates/loads an instance of plugin `pluginHandle`.
     *
     * The instance is named `instanceHandle` and located in the Workspace named `instanceHandle`.
     *
     * For example, one may write the following to always get back the same package instance, no matter how many
     * times you run it, scoped into its own workspace:
     *
     * ```javascript
     * let plugin = Steamship.usePlugin('plugin-handle', 'instance-handle')
     * ```
     *
     * If you wish to override the usage of a workspace named `instanceHandle`,
     * you can provide the `workspaceHandle` parameter.
     * @returns PluginInstance
     */
  }, {
    key: "usePlugin",
    value:
    /**
     * Creates/loads an instance of plugin `pluginHandle`.
     * The instance is named `instanceHandle` and located in the workspace this
     * client is anchored to instanceHandle."""
     * @returns PluginInstance
     */
    function () {
      var _usePlugin = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(pluginHandle, instanceHandle, config, version, reuse) {
        var fixedInstanceHandle, response;
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              fixedInstanceHandle = instanceHandle || pluginHandle;
              if (typeof reuse == 'undefined') {
                reuse = true;
              }
              _context3.next = 4;
              return _plugin_instance.PluginInstance.create(this, {
                handle: fixedInstanceHandle,
                pluginHandle: pluginHandle,
                pluginVersionHandle: version,
                fetchIfExists: reuse,
                config: config
              });
            case 4:
              response = _context3.sent;
              if (response.output) {
                _context3.next = 7;
                break;
              }
              throw new _steamship_error.SteamshipError({
                statusMessage: 'Unable to create an instance of your plugin -- an empty object was returned.'
              });
            case 7:
              return _context3.abrupt("return", response.output);
            case 8:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function usePlugin(_x6, _x7, _x8, _x9, _x10) {
        return _usePlugin.apply(this, arguments);
      }
      return usePlugin;
    }()
  }], [{
    key: "use",
    value: function () {
      var _use2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4(packageHandle, instanceHandle, config, version, reuse, workspaceHandle) {
        var fixedInstanceHandle, workspace, client;
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              fixedInstanceHandle = instanceHandle || packageHandle;
              workspace = workspaceHandle || fixedInstanceHandle;
              log.info("Steamship.use using workspace ".concat(workspace, ", instanceHandle ").concat(fixedInstanceHandle));
              client = new Steamship({
                workspace: workspace
              });
              return _context4.abrupt("return", client.use(packageHandle, fixedInstanceHandle, config, version, reuse));
            case 5:
            case "end":
              return _context4.stop();
          }
        }, _callee4);
      }));
      function use(_x11, _x12, _x13, _x14, _x15, _x16) {
        return _use2.apply(this, arguments);
      }
      return use;
    }()
  }, {
    key: "usePlugin",
    value: function () {
      var _usePlugin2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(pluginHandle, instanceHandle, config, version, reuse, workspaceHandle) {
        var fixedInstanceHandle, configArgs, client;
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              fixedInstanceHandle = instanceHandle || pluginHandle;
              configArgs = {
                workspace: workspaceHandle || fixedInstanceHandle
              };
              client = new Steamship(configArgs);
              return _context5.abrupt("return", client.usePlugin(pluginHandle, fixedInstanceHandle, config, version, reuse));
            case 4:
            case "end":
              return _context5.stop();
          }
        }, _callee5);
      }));
      function usePlugin(_x17, _x18, _x19, _x20, _x21, _x22) {
        return _usePlugin2.apply(this, arguments);
      }
      return usePlugin;
    }()
  }]);
  return Steamship;
}(_api_base.ApiBase);
exports.Steamship = Steamship;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,