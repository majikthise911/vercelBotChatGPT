"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Task = void 0;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));
var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _base = require("./types/base.js");
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
var _EXPECT_TASK = function _EXPECT_TASK(client, data) {
  return new Task(client, data);
};
var _EXPECT_LIST = function _EXPECT_LIST(client, data) {
  if (!data) {
    return {
      tasks: []
    };
  }
  return {
    tasks: data.tasks.map(function (x) {
      return _EXPECT_TASK(client, x);
    })
  };
};
var Task = /*#__PURE__*/function () {
  function Task(client, params) {
    (0, _classCallCheck2["default"])(this, Task);
    (0, _defineProperty2["default"])(this, "client", void 0);
    (0, _defineProperty2["default"])(this, "taskId", void 0);
    (0, _defineProperty2["default"])(this, "userId", void 0);
    (0, _defineProperty2["default"])(this, "workspaceId", void 0);
    (0, _defineProperty2["default"])(this, "version", void 0);
    (0, _defineProperty2["default"])(this, "name", void 0);
    (0, _defineProperty2["default"])(this, "input", void 0);
    (0, _defineProperty2["default"])(this, "output", void 0);
    (0, _defineProperty2["default"])(this, "maxRetries", void 0);
    (0, _defineProperty2["default"])(this, "retries", void 0);
    (0, _defineProperty2["default"])(this, "state", void 0);
    (0, _defineProperty2["default"])(this, "statusMessage", void 0);
    (0, _defineProperty2["default"])(this, "statusCode", void 0);
    (0, _defineProperty2["default"])(this, "statusSuggestion", void 0);
    (0, _defineProperty2["default"])(this, "taskCreatedOn", void 0);
    (0, _defineProperty2["default"])(this, "taskLastModifiedOn", void 0);
    (0, _defineProperty2["default"])(this, "taskExecutor", void 0);
    (0, _defineProperty2["default"])(this, "taskType", void 0);
    (0, _defineProperty2["default"])(this, "assignedWorker", void 0);
    (0, _defineProperty2["default"])(this, "startedAt", void 0);
    (0, _defineProperty2["default"])(this, "responsePath", void 0);
    (0, _defineProperty2["default"])(this, "rawResponse", void 0);
    (0, _defineProperty2["default"])(this, "objectConstructor", void 0);
    this.client = client;
    this.update(params);

    // Only set these the first time.
    this.responsePath = params === null || params === void 0 ? void 0 : params.responsePath;
    this.rawResponse = params === null || params === void 0 ? void 0 : params.rawResponse;
    this.objectConstructor = params === null || params === void 0 ? void 0 : params.objectConstructor;
  }
  (0, _createClass2["default"])(Task, [{
    key: "update",
    value: function update(params) {
      if (params) {
        this.taskId = params === null || params === void 0 ? void 0 : params.taskId;
        this.userId = params === null || params === void 0 ? void 0 : params.userId;
        this.workspaceId = params === null || params === void 0 ? void 0 : params.workspaceId;
        this.version = params === null || params === void 0 ? void 0 : params.version;
        this.name = params === null || params === void 0 ? void 0 : params.name;
        this.input = params === null || params === void 0 ? void 0 : params.input;
        this.maxRetries = params === null || params === void 0 ? void 0 : params.maxRetries;
        this.maxRetries = params === null || params === void 0 ? void 0 : params.maxRetries;
        this.retries = params === null || params === void 0 ? void 0 : params.retries;
        this.state = params === null || params === void 0 ? void 0 : params.state;
        this.statusMessage = params === null || params === void 0 ? void 0 : params.statusMessage;
        this.statusCode = params === null || params === void 0 ? void 0 : params.statusCode;
        this.statusSuggestion = params === null || params === void 0 ? void 0 : params.statusSuggestion;
        this.taskCreatedOn = params === null || params === void 0 ? void 0 : params.taskCreatedOn;
        this.taskLastModifiedOn = params === null || params === void 0 ? void 0 : params.taskLastModifiedOn;
        this.taskExecutor = params === null || params === void 0 ? void 0 : params.taskExecutor;
        this.taskType = params === null || params === void 0 ? void 0 : params.taskType;
        this.assignedWorker = params === null || params === void 0 ? void 0 : params.assignedWorker;
        this.startedAt = params === null || params === void 0 ? void 0 : params.startedAt;
        this.setData(params === null || params === void 0 ? void 0 : params.output);
      }
      return this;
    }
  }, {
    key: "setData",
    value: function setData(data) {
      if (typeof data != 'undefined') {
        if (data && this.responsePath) {
          if (data[this.responsePath]) {
            data = data[this.responsePath];
          }
        }
        if (data && this.objectConstructor) {
          this.output = this.objectConstructor(this.client, data);
        } else {
          this.output = data;
        }
      }
    }
  }, {
    key: "completed",
    value: function completed() {
      return this.state == _base.TaskState.succeeded || this.state == _base.TaskState.failed;
    }
  }, {
    key: "failed",
    value: function failed() {
      return this.state == _base.TaskState.failed;
    }
  }, {
    key: "wait",
    value: function () {
      var _wait = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(params) {
        var _params, maxTimeoutSeconds, retryDelaySeconds, start;
        return _regenerator["default"].wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              // Bailout and defaults
              if (typeof params == 'undefined') {
                params = {};
              }
              _params = params, maxTimeoutSeconds = _params.maxTimeoutSeconds, retryDelaySeconds = _params.retryDelaySeconds;
              if (typeof maxTimeoutSeconds == 'undefined') {
                maxTimeoutSeconds = 60;
              }
              if (typeof retryDelaySeconds == 'undefined') {
                retryDelaySeconds = 1;
              }

              // If we've already finished, no need to poll
              if (!(this.completed() === true)) {
                _context.next = 6;
                break;
              }
              return _context.abrupt("return", this);
            case 6:
              // Start the wait loop.
              start = Date.now(); // ms since epoch
              _context.next = 9;
              return this.check();
            case 9:
              if (!(this.completed() === true)) {
                _context.next = 11;
                break;
              }
              return _context.abrupt("return", this);
            case 11:
              if (!((Date.now() - start) / 1000.0 < maxTimeoutSeconds)) {
                _context.next = 20;
                break;
              }
              _context.next = 14;
              return new Promise(function (r) {
                return setTimeout(r, 1000 * retryDelaySeconds);
              });
            case 14:
              _context.next = 16;
              return this.check();
            case 16:
              if (!(this.completed() === true)) {
                _context.next = 18;
                break;
              }
              return _context.abrupt("return", this);
            case 18:
              _context.next = 11;
              break;
            case 20:
              return _context.abrupt("return", this);
            case 21:
            case "end":
              return _context.stop();
          }
        }, _callee, this);
      }));
      function wait(_x) {
        return _wait.apply(this, arguments);
      }
      return wait;
    }()
  }, {
    key: "check",
    value: function () {
      var _check = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee2() {
        var result;
        return _regenerator["default"].wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              _context2.next = 2;
              return this.client.post('task/status', {
                taskId: this.taskId
              });
            case 2:
              result = _context2.sent;
              if (result) {
                this.update(result);
              }
              return _context2.abrupt("return", this);
            case 5:
            case "end":
              return _context2.stop();
          }
        }, _callee2, this);
      }));
      function check() {
        return _check.apply(this, arguments);
      }
      return check;
    }()
  }, {
    key: "addComment",
    value: function () {
      var _addComment = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee3(params) {
        return _regenerator["default"].wrap(function _callee3$(_context3) {
          while (1) switch (_context3.prev = _context3.next) {
            case 0:
              if ((0, _typeof2["default"])(params.metadata) == 'object') {
                params.metadata = JSON.stringify(params.metadata);
              }
              _context3.next = 3;
              return this.client.post('task/comment/create', _objectSpread({
                taskId: this.taskId
              }, params));
            case 3:
              return _context3.abrupt("return", _context3.sent);
            case 4:
            case "end":
              return _context3.stop();
          }
        }, _callee3, this);
      }));
      function addComment(_x2) {
        return _addComment.apply(this, arguments);
      }
      return addComment;
    }()
  }, {
    key: "listComments",
    value: function () {
      var _listComments = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee4() {
        return _regenerator["default"].wrap(function _callee4$(_context4) {
          while (1) switch (_context4.prev = _context4.next) {
            case 0:
              _context4.next = 2;
              return this.client.post('task/comment/list', {
                taskId: this.taskId
              });
            case 2:
              return _context4.abrupt("return", _context4.sent);
            case 3:
            case "end":
              return _context4.stop();
          }
        }, _callee4, this);
      }));
      function listComments() {
        return _listComments.apply(this, arguments);
      }
      return listComments;
    }()
  }, {
    key: "deleteComment",
    value: function () {
      var _deleteComment = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee5(params) {
        return _regenerator["default"].wrap(function _callee5$(_context5) {
          while (1) switch (_context5.prev = _context5.next) {
            case 0:
              _context5.next = 2;
              return this.client.post('task/comment/delete', params);
            case 2:
              return _context5.abrupt("return", _context5.sent);
            case 3:
            case "end":
              return _context5.stop();
          }
        }, _callee5, this);
      }));
      function deleteComment(_x3) {
        return _deleteComment.apply(this, arguments);
      }
      return deleteComment;
    }()
  }], [{
    key: "list",
    value: function () {
      var _list = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee6(client, params, config) {
        return _regenerator["default"].wrap(function _callee6$(_context6) {
          while (1) switch (_context6.prev = _context6.next) {
            case 0:
              _context6.next = 2;
              return client.post('/task/list', _objectSpread({}, params), _objectSpread({
                expect: _EXPECT_LIST
              }, config));
            case 2:
              return _context6.abrupt("return", _context6.sent);
            case 3:
            case "end":
              return _context6.stop();
          }
        }, _callee6);
      }));
      function list(_x4, _x5, _x6) {
        return _list.apply(this, arguments);
      }
      return list;
    }()
  }]);
  return Task;
}();
exports.Task = Task;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,