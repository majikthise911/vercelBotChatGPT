function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
import getSteamshipClient from "./getSteamshipClient.js";
import { Md5 } from "ts-md5";
/**
 * When package configuration or version information changes, it locates the new instance in the SAME
 * workspace as prior versions. This ensures continuity of data persisted across different configurations
 * and versions.
 *
 * @param props
 */
export default function getSteamshipPackage(_x) {
  return _getSteamshipPackage.apply(this, arguments);
}
function _getSteamshipPackage() {
  _getSteamshipPackage = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(props) {
    var pkg, version, client, config, configJsonString, md5, configMd5, pkgInstanceHandle, handleSaveVersion, reuse, instance;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          pkg = props.pkg, version = props.version;
          if (!pkg || typeof pkg == "undefined") {
            pkg = process.env.STEAMSHIP_PACKAGE_HANDLE;
          }
          if (!(!pkg || typeof pkg == "undefined")) {
            _context.next = 4;
            break;
          }
          throw new Error('Missing Steamship `pkg` in props. This unique handle ([a-z0-9-]) identifies the API you wish to invoke. Please provide to `getSteamshipPackage` or set the `STEAMSHIP_PACKAGE_HANDLE` environment variable.');
        case 4:
          client = getSteamshipClient(props);
          config = props.config || {}; // Calculate an instance handle that reflects a hash of the config.
          configJsonString = JSON.stringify(config, Object.keys(config).sort());
          md5 = new Md5();
          md5.appendStr(configJsonString);
          configMd5 = md5.end();
          pkgInstanceHandle = props.workspace + "-" + configMd5;
          if (version) {
            handleSaveVersion = version.replace(/[^a-z0-9-]/g, '');
            pkgInstanceHandle = pkgInstanceHandle + "-v" + handleSaveVersion;
          }
          reuse = true;
          _context.next = 15;
          return client.use(pkg, pkgInstanceHandle, config, version, reuse);
        case 15:
          instance = _context.sent;
          return _context.abrupt("return", instance);
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getSteamshipPackage.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRTdGVhbXNoaXBDbGllbnQiLCJNZDUiLCJnZXRTdGVhbXNoaXBQYWNrYWdlIiwicHJvcHMiLCJwa2ciLCJ2ZXJzaW9uIiwicHJvY2VzcyIsImVudiIsIlNURUFNU0hJUF9QQUNLQUdFX0hBTkRMRSIsIkVycm9yIiwiY2xpZW50IiwiY29uZmlnIiwiY29uZmlnSnNvblN0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsIm1kNSIsImFwcGVuZFN0ciIsImNvbmZpZ01kNSIsImVuZCIsInBrZ0luc3RhbmNlSGFuZGxlIiwid29ya3NwYWNlIiwiaGFuZGxlU2F2ZVZlcnNpb24iLCJyZXBsYWNlIiwicmV1c2UiLCJ1c2UiLCJpbnN0YW5jZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZXRTdGVhbXNoaXBQYWNrYWdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRTdGVhbXNoaXBDbGllbnQsIHtHZXRTdGVhbXNoaXBDbGllbnRQcm9wc30gZnJvbSBcIi4vZ2V0U3RlYW1zaGlwQ2xpZW50LmpzXCI7XG5pbXBvcnQge01kNX0gZnJvbSBcInRzLW1kNVwiO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0U3RlYW1zaGlwUGFja2FnZVByb3BzIGV4dGVuZHMgR2V0U3RlYW1zaGlwQ2xpZW50UHJvcHMge1xuICAvLyBUaGUgcGFja2FnZSB3aG9zZSBtZXRob2QgeW91IHdhbnQgdG8gcHJveHlcbiAgcGtnOiBzdHJpbmcsXG5cbiAgLy8gVGhlIG9wdGlvbmFsIHZlcnNpb24gb2YgdGhlIHBhY2thZ2VcbiAgdmVyc2lvbj86IHN0cmluZyxcblxuICAvLyBUaGUgY29uZmlnIG9mIHRoZSBwYWNrYWdlIHdob3NlIG1ldGhvZCB5b3Ugd2FudCB0byBwcm94eVxuICBjb25maWc/OiBNYXA8c3RyaW5nLCBhbnk+LFxufVxuXG4vKipcbiAqIFdoZW4gcGFja2FnZSBjb25maWd1cmF0aW9uIG9yIHZlcnNpb24gaW5mb3JtYXRpb24gY2hhbmdlcywgaXQgbG9jYXRlcyB0aGUgbmV3IGluc3RhbmNlIGluIHRoZSBTQU1FXG4gKiB3b3Jrc3BhY2UgYXMgcHJpb3IgdmVyc2lvbnMuIFRoaXMgZW5zdXJlcyBjb250aW51aXR5IG9mIGRhdGEgcGVyc2lzdGVkIGFjcm9zcyBkaWZmZXJlbnQgY29uZmlndXJhdGlvbnNcbiAqIGFuZCB2ZXJzaW9ucy5cbiAqXG4gKiBAcGFyYW0gcHJvcHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2V0U3RlYW1zaGlwUGFja2FnZShwcm9wczogR2V0U3RlYW1zaGlwUGFja2FnZVByb3BzKSB7XG4gIGxldCB7IHBrZywgdmVyc2lvbiB9ID0gcHJvcHM7XG5cbiAgaWYgKCghcGtnKSB8fCAodHlwZW9mIHBrZyA9PSBcInVuZGVmaW5lZFwiKSkge1xuICAgIHBrZyA9IHByb2Nlc3MuZW52LlNURUFNU0hJUF9QQUNLQUdFX0hBTkRMRSBhcyBzdHJpbmc7XG4gIH1cblxuICBpZiAoKCFwa2cpIHx8ICh0eXBlb2YgcGtnID09IFwidW5kZWZpbmVkXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFN0ZWFtc2hpcCBgcGtnYCBpbiBwcm9wcy4gVGhpcyB1bmlxdWUgaGFuZGxlIChbYS16MC05LV0pIGlkZW50aWZpZXMgdGhlIEFQSSB5b3Ugd2lzaCB0byBpbnZva2UuIFBsZWFzZSBwcm92aWRlIHRvIGBnZXRTdGVhbXNoaXBQYWNrYWdlYCBvciBzZXQgdGhlIGBTVEVBTVNISVBfUEFDS0FHRV9IQU5ETEVgIGVudmlyb25tZW50IHZhcmlhYmxlLicpXG4gIH1cblxuICBjb25zdCBjbGllbnQgPSBnZXRTdGVhbXNoaXBDbGllbnQocHJvcHMpXG5cbiAgY29uc3QgY29uZmlnID0gcHJvcHMuY29uZmlnIHx8IHt9O1xuXG4gIC8vIENhbGN1bGF0ZSBhbiBpbnN0YW5jZSBoYW5kbGUgdGhhdCByZWZsZWN0cyBhIGhhc2ggb2YgdGhlIGNvbmZpZy5cbiAgY29uc3QgY29uZmlnSnNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZywgT2JqZWN0LmtleXMoY29uZmlnKS5zb3J0KCkpO1xuICBjb25zdCBtZDUgPSBuZXcgTWQ1KCk7XG4gIG1kNS5hcHBlbmRTdHIoY29uZmlnSnNvblN0cmluZylcbiAgY29uc3QgY29uZmlnTWQ1ID0gbWQ1LmVuZCgpXG5cbiAgbGV0IHBrZ0luc3RhbmNlSGFuZGxlID0gYCR7cHJvcHMud29ya3NwYWNlfS0ke2NvbmZpZ01kNX1gXG5cbiAgaWYgKHZlcnNpb24pIHtcbiAgICB2YXIgaGFuZGxlU2F2ZVZlcnNpb24gPSB2ZXJzaW9uLnJlcGxhY2UoL1teYS16MC05LV0vZywgJycpO1xuICAgIHBrZ0luc3RhbmNlSGFuZGxlID0gYCR7cGtnSW5zdGFuY2VIYW5kbGV9LXYke2hhbmRsZVNhdmVWZXJzaW9ufWBcbiAgfVxuXG4gIGNvbnN0IHJldXNlID0gdHJ1ZTtcblxuICBsZXQgaW5zdGFuY2UgPSBhd2FpdCBjbGllbnQudXNlKFxuICAgIHBrZyxcbiAgICBwa2dJbnN0YW5jZUhhbmRsZSxcbiAgICBjb25maWcsXG4gICAgdmVyc2lvbixcbiAgICByZXVzZVxuICApXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbiJdLCJtYXBwaW5ncyI6IitDQUNBO0FBQUE7QUFBQTtBQURBLE9BQU9BLGtCQUFrQixNQUFpQyx5QkFBeUI7QUFDbkYsU0FBUUMsR0FBRyxRQUFPLFFBQVE7QUFjMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBOEJDLG1CQUFtQjtFQUFBO0FBQUE7QUFzQ2hEO0VBQUEsa0ZBdENjLGlCQUFtQ0MsS0FBK0I7SUFBQTtJQUFBO01BQUE7UUFBQTtVQUN6RUMsR0FBRyxHQUFjRCxLQUFLLENBQXRCQyxHQUFHLEVBQUVDLE9BQU8sR0FBS0YsS0FBSyxDQUFqQkUsT0FBTztVQUVsQixJQUFLLENBQUNELEdBQUcsSUFBTSxPQUFPQSxHQUFHLElBQUksV0FBWSxFQUFFO1lBQ3pDQSxHQUFHLEdBQUdFLE9BQU8sQ0FBQ0MsR0FBRyxDQUFDQyx3QkFBa0M7VUFDdEQ7VUFBQyxNQUVJLENBQUNKLEdBQUcsSUFBTSxPQUFPQSxHQUFHLElBQUksV0FBWTtZQUFBO1lBQUE7VUFBQTtVQUFBLE1BQ2pDLElBQUlLLEtBQUssQ0FBQyw2TUFBNk0sQ0FBQztRQUFBO1VBRzFOQyxNQUFNLEdBQUdWLGtCQUFrQixDQUFDRyxLQUFLLENBQUM7VUFFbENRLE1BQU0sR0FBR1IsS0FBSyxDQUFDUSxNQUFNLElBQUksQ0FBQyxDQUFDLEVBRWpDO1VBQ01DLGdCQUFnQixHQUFHQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0gsTUFBTSxFQUFFSSxNQUFNLENBQUNDLElBQUksQ0FBQ0wsTUFBTSxDQUFDLENBQUNNLElBQUksRUFBRSxDQUFDO1VBQ3JFQyxHQUFHLEdBQUcsSUFBSWpCLEdBQUcsRUFBRTtVQUNyQmlCLEdBQUcsQ0FBQ0MsU0FBUyxDQUFDUCxnQkFBZ0IsQ0FBQztVQUN6QlEsU0FBUyxHQUFHRixHQUFHLENBQUNHLEdBQUcsRUFBRTtVQUV2QkMsaUJBQWlCLEdBQU1uQixLQUFLLENBQUNvQixTQUFTLFNBQUlILFNBQVM7VUFFdkQsSUFBSWYsT0FBTyxFQUFFO1lBQ1BtQixpQkFBaUIsR0FBR25CLE9BQU8sQ0FBQ29CLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRSxDQUFDO1lBQzFESCxpQkFBaUIsR0FBTUEsaUJBQWlCLFVBQUtFLGlCQUFtQjtVQUNsRTtVQUVNRSxLQUFLLEdBQUcsSUFBSTtVQUFBO1VBQUEsT0FFR2hCLE1BQU0sQ0FBQ2lCLEdBQUcsQ0FDN0J2QixHQUFHLEVBQ0hrQixpQkFBaUIsRUFDakJYLE1BQU0sRUFDTk4sT0FBTyxFQUNQcUIsS0FBSyxDQUNOO1FBQUE7VUFOR0UsUUFBUTtVQUFBLGlDQU9MQSxRQUFRO1FBQUE7UUFBQTtVQUFBO01BQUE7SUFBQTtFQUFBLENBQ2hCO0VBQUE7QUFBQSJ9