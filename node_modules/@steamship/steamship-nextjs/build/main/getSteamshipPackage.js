"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getSteamshipPackage;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _getSteamshipClient = _interopRequireDefault(require("./getSteamshipClient.js"));
var _tsMd = require("ts-md5");
/**
 * When package configuration or version information changes, it locates the new instance in the SAME
 * workspace as prior versions. This ensures continuity of data persisted across different configurations
 * and versions.
 *
 * @param props
 */
function getSteamshipPackage(_x) {
  return _getSteamshipPackage.apply(this, arguments);
}
function _getSteamshipPackage() {
  _getSteamshipPackage = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(props) {
    var pkg, version, client, config, configJsonString, md5, configMd5, pkgInstanceHandle, handleSaveVersion, reuse, instance;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          pkg = props.pkg, version = props.version;
          if (!pkg || typeof pkg == "undefined") {
            pkg = process.env.STEAMSHIP_PACKAGE_HANDLE;
          }
          if (!(!pkg || typeof pkg == "undefined")) {
            _context.next = 4;
            break;
          }
          throw new Error('Missing Steamship `pkg` in props. This unique handle ([a-z0-9-]) identifies the API you wish to invoke. Please provide to `getSteamshipPackage` or set the `STEAMSHIP_PACKAGE_HANDLE` environment variable.');
        case 4:
          client = (0, _getSteamshipClient["default"])(props);
          config = props.config || {}; // Calculate an instance handle that reflects a hash of the config.
          configJsonString = JSON.stringify(config, Object.keys(config).sort());
          md5 = new _tsMd.Md5();
          md5.appendStr(configJsonString);
          configMd5 = md5.end();
          pkgInstanceHandle = "".concat(props.workspace, "-").concat(configMd5);
          if (version) {
            handleSaveVersion = version.replace(/[^a-z0-9-]/g, '');
            pkgInstanceHandle = "".concat(pkgInstanceHandle, "-v").concat(handleSaveVersion);
          }
          reuse = true;
          _context.next = 15;
          return client.use(pkg, pkgInstanceHandle, config, version, reuse);
        case 15:
          instance = _context.sent;
          return _context.abrupt("return", instance);
        case 17:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return _getSteamshipPackage.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRTdGVhbXNoaXBQYWNrYWdlIiwicHJvcHMiLCJwa2ciLCJ2ZXJzaW9uIiwicHJvY2VzcyIsImVudiIsIlNURUFNU0hJUF9QQUNLQUdFX0hBTkRMRSIsIkVycm9yIiwiY2xpZW50IiwiZ2V0U3RlYW1zaGlwQ2xpZW50IiwiY29uZmlnIiwiY29uZmlnSnNvblN0cmluZyIsIkpTT04iLCJzdHJpbmdpZnkiLCJPYmplY3QiLCJrZXlzIiwic29ydCIsIm1kNSIsIk1kNSIsImFwcGVuZFN0ciIsImNvbmZpZ01kNSIsImVuZCIsInBrZ0luc3RhbmNlSGFuZGxlIiwid29ya3NwYWNlIiwiaGFuZGxlU2F2ZVZlcnNpb24iLCJyZXBsYWNlIiwicmV1c2UiLCJ1c2UiLCJpbnN0YW5jZSJdLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9nZXRTdGVhbXNoaXBQYWNrYWdlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBnZXRTdGVhbXNoaXBDbGllbnQsIHtHZXRTdGVhbXNoaXBDbGllbnRQcm9wc30gZnJvbSBcIi4vZ2V0U3RlYW1zaGlwQ2xpZW50LmpzXCI7XG5pbXBvcnQge01kNX0gZnJvbSBcInRzLW1kNVwiO1xuXG5cbmV4cG9ydCBpbnRlcmZhY2UgR2V0U3RlYW1zaGlwUGFja2FnZVByb3BzIGV4dGVuZHMgR2V0U3RlYW1zaGlwQ2xpZW50UHJvcHMge1xuICAvLyBUaGUgcGFja2FnZSB3aG9zZSBtZXRob2QgeW91IHdhbnQgdG8gcHJveHlcbiAgcGtnOiBzdHJpbmcsXG5cbiAgLy8gVGhlIG9wdGlvbmFsIHZlcnNpb24gb2YgdGhlIHBhY2thZ2VcbiAgdmVyc2lvbj86IHN0cmluZyxcblxuICAvLyBUaGUgY29uZmlnIG9mIHRoZSBwYWNrYWdlIHdob3NlIG1ldGhvZCB5b3Ugd2FudCB0byBwcm94eVxuICBjb25maWc/OiBNYXA8c3RyaW5nLCBhbnk+LFxufVxuXG4vKipcbiAqIFdoZW4gcGFja2FnZSBjb25maWd1cmF0aW9uIG9yIHZlcnNpb24gaW5mb3JtYXRpb24gY2hhbmdlcywgaXQgbG9jYXRlcyB0aGUgbmV3IGluc3RhbmNlIGluIHRoZSBTQU1FXG4gKiB3b3Jrc3BhY2UgYXMgcHJpb3IgdmVyc2lvbnMuIFRoaXMgZW5zdXJlcyBjb250aW51aXR5IG9mIGRhdGEgcGVyc2lzdGVkIGFjcm9zcyBkaWZmZXJlbnQgY29uZmlndXJhdGlvbnNcbiAqIGFuZCB2ZXJzaW9ucy5cbiAqXG4gKiBAcGFyYW0gcHJvcHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2V0U3RlYW1zaGlwUGFja2FnZShwcm9wczogR2V0U3RlYW1zaGlwUGFja2FnZVByb3BzKSB7XG4gIGxldCB7IHBrZywgdmVyc2lvbiB9ID0gcHJvcHM7XG5cbiAgaWYgKCghcGtnKSB8fCAodHlwZW9mIHBrZyA9PSBcInVuZGVmaW5lZFwiKSkge1xuICAgIHBrZyA9IHByb2Nlc3MuZW52LlNURUFNU0hJUF9QQUNLQUdFX0hBTkRMRSBhcyBzdHJpbmc7XG4gIH1cblxuICBpZiAoKCFwa2cpIHx8ICh0eXBlb2YgcGtnID09IFwidW5kZWZpbmVkXCIpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIFN0ZWFtc2hpcCBgcGtnYCBpbiBwcm9wcy4gVGhpcyB1bmlxdWUgaGFuZGxlIChbYS16MC05LV0pIGlkZW50aWZpZXMgdGhlIEFQSSB5b3Ugd2lzaCB0byBpbnZva2UuIFBsZWFzZSBwcm92aWRlIHRvIGBnZXRTdGVhbXNoaXBQYWNrYWdlYCBvciBzZXQgdGhlIGBTVEVBTVNISVBfUEFDS0FHRV9IQU5ETEVgIGVudmlyb25tZW50IHZhcmlhYmxlLicpXG4gIH1cblxuICBjb25zdCBjbGllbnQgPSBnZXRTdGVhbXNoaXBDbGllbnQocHJvcHMpXG5cbiAgY29uc3QgY29uZmlnID0gcHJvcHMuY29uZmlnIHx8IHt9O1xuXG4gIC8vIENhbGN1bGF0ZSBhbiBpbnN0YW5jZSBoYW5kbGUgdGhhdCByZWZsZWN0cyBhIGhhc2ggb2YgdGhlIGNvbmZpZy5cbiAgY29uc3QgY29uZmlnSnNvblN0cmluZyA9IEpTT04uc3RyaW5naWZ5KGNvbmZpZywgT2JqZWN0LmtleXMoY29uZmlnKS5zb3J0KCkpO1xuICBjb25zdCBtZDUgPSBuZXcgTWQ1KCk7XG4gIG1kNS5hcHBlbmRTdHIoY29uZmlnSnNvblN0cmluZylcbiAgY29uc3QgY29uZmlnTWQ1ID0gbWQ1LmVuZCgpXG5cbiAgbGV0IHBrZ0luc3RhbmNlSGFuZGxlID0gYCR7cHJvcHMud29ya3NwYWNlfS0ke2NvbmZpZ01kNX1gXG5cbiAgaWYgKHZlcnNpb24pIHtcbiAgICB2YXIgaGFuZGxlU2F2ZVZlcnNpb24gPSB2ZXJzaW9uLnJlcGxhY2UoL1teYS16MC05LV0vZywgJycpO1xuICAgIHBrZ0luc3RhbmNlSGFuZGxlID0gYCR7cGtnSW5zdGFuY2VIYW5kbGV9LXYke2hhbmRsZVNhdmVWZXJzaW9ufWBcbiAgfVxuXG4gIGNvbnN0IHJldXNlID0gdHJ1ZTtcblxuICBsZXQgaW5zdGFuY2UgPSBhd2FpdCBjbGllbnQudXNlKFxuICAgIHBrZyxcbiAgICBwa2dJbnN0YW5jZUhhbmRsZSxcbiAgICBjb25maWcsXG4gICAgdmVyc2lvbixcbiAgICByZXVzZVxuICApXG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7QUFDQTtBQWNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBTkEsU0FPOEJBLG1CQUFtQjtFQUFBO0FBQUE7QUFBQTtFQUFBLHFHQUFsQyxpQkFBbUNDLEtBQStCO0lBQUE7SUFBQTtNQUFBO1FBQUE7VUFDekVDLEdBQUcsR0FBY0QsS0FBSyxDQUF0QkMsR0FBRyxFQUFFQyxPQUFPLEdBQUtGLEtBQUssQ0FBakJFLE9BQU87VUFFbEIsSUFBSyxDQUFDRCxHQUFHLElBQU0sT0FBT0EsR0FBRyxJQUFJLFdBQVksRUFBRTtZQUN6Q0EsR0FBRyxHQUFHRSxPQUFPLENBQUNDLEdBQUcsQ0FBQ0Msd0JBQWtDO1VBQ3REO1VBQUMsTUFFSSxDQUFDSixHQUFHLElBQU0sT0FBT0EsR0FBRyxJQUFJLFdBQVk7WUFBQTtZQUFBO1VBQUE7VUFBQSxNQUNqQyxJQUFJSyxLQUFLLENBQUMsNk1BQTZNLENBQUM7UUFBQTtVQUcxTkMsTUFBTSxHQUFHLElBQUFDLDhCQUFrQixFQUFDUixLQUFLLENBQUM7VUFFbENTLE1BQU0sR0FBR1QsS0FBSyxDQUFDUyxNQUFNLElBQUksQ0FBQyxDQUFDLEVBRWpDO1VBQ01DLGdCQUFnQixHQUFHQyxJQUFJLENBQUNDLFNBQVMsQ0FBQ0gsTUFBTSxFQUFFSSxNQUFNLENBQUNDLElBQUksQ0FBQ0wsTUFBTSxDQUFDLENBQUNNLElBQUksRUFBRSxDQUFDO1VBQ3JFQyxHQUFHLEdBQUcsSUFBSUMsU0FBRyxFQUFFO1VBQ3JCRCxHQUFHLENBQUNFLFNBQVMsQ0FBQ1IsZ0JBQWdCLENBQUM7VUFDekJTLFNBQVMsR0FBR0gsR0FBRyxDQUFDSSxHQUFHLEVBQUU7VUFFdkJDLGlCQUFpQixhQUFNckIsS0FBSyxDQUFDc0IsU0FBUyxjQUFJSCxTQUFTO1VBRXZELElBQUlqQixPQUFPLEVBQUU7WUFDUHFCLGlCQUFpQixHQUFHckIsT0FBTyxDQUFDc0IsT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFLENBQUM7WUFDMURILGlCQUFpQixhQUFNQSxpQkFBaUIsZUFBS0UsaUJBQWlCLENBQUU7VUFDbEU7VUFFTUUsS0FBSyxHQUFHLElBQUk7VUFBQTtVQUFBLE9BRUdsQixNQUFNLENBQUNtQixHQUFHLENBQzdCekIsR0FBRyxFQUNIb0IsaUJBQWlCLEVBQ2pCWixNQUFNLEVBQ05QLE9BQU8sRUFDUHVCLEtBQUssQ0FDTjtRQUFBO1VBTkdFLFFBQVE7VUFBQSxpQ0FPTEEsUUFBUTtRQUFBO1FBQUE7VUFBQTtNQUFBO0lBQUE7RUFBQSxDQUNoQjtFQUFBO0FBQUEifQ==