"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getTask;
var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _getSteamshipClient = _interopRequireDefault(require("./getSteamshipClient.js"));
var _client = require("@steamship/client");
/**
 * Returns a task in progress.
 *
 * @param props
 */
function getTask(_x) {
  return _getTask.apply(this, arguments);
}
function _getTask() {
  _getTask = (0, _asyncToGenerator2["default"])( /*#__PURE__*/_regenerator["default"].mark(function _callee(props) {
    var client, taskId, task, taskJson, buff, _awaitedEx$response, _awaitedEx$response$d, _awaitedEx$response$d2, _taskJson, awaitedEx, _awaitedEx$response2, _awaitedEx$response2$, _awaitedEx$response2$2;
    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          client = (0, _getSteamshipClient["default"])(props);
          taskId = props.taskId;
          if (taskId) {
            _context.next = 4;
            break;
          }
          throw new Error('Missing taskId  in props.');
        case 4:
          _context.prev = 4;
          // @ts-ignore
          task = new _client.Task(client, {
            taskId: taskId
          });
          _context.next = 8;
          return task.check();
        case 8:
          // Return JSON to the web client.
          taskJson = {
            taskId: task.taskId || taskId,
            state: task.state,
            statusMessage: task.statusMessage,
            output: task.output
          };
          if (taskJson.state == 'succeeded') {
            // Output will be Base64 encoded so that binary is available.
            try {
              buff = new Buffer(taskJson.output, 'base64');
              taskJson.output = buff.toString('utf-8'); // We know it's utf-8 here.
            } catch (_unused) {
              console.log("Base64 decoding of task output failed.");
            }
          }
          return _context.abrupt("return", taskJson);
        case 13:
          _context.prev = 13;
          _context.t0 = _context["catch"](4);
          _taskJson = {
            taskId: taskId,
            state: 'failed',
            statusMessage: 'An unexpected error happened.'
          };
          _context.next = 18;
          return _context.t0;
        case 18:
          awaitedEx = _context.sent;
          if (awaitedEx !== null && awaitedEx !== void 0 && (_awaitedEx$response = awaitedEx.response) !== null && _awaitedEx$response !== void 0 && (_awaitedEx$response$d = _awaitedEx$response.data) !== null && _awaitedEx$response$d !== void 0 && (_awaitedEx$response$d2 = _awaitedEx$response$d.status) !== null && _awaitedEx$response$d2 !== void 0 && _awaitedEx$response$d2.statusMessage) {
            _taskJson.statusMessage = awaitedEx === null || awaitedEx === void 0 ? void 0 : (_awaitedEx$response2 = awaitedEx.response) === null || _awaitedEx$response2 === void 0 ? void 0 : (_awaitedEx$response2$ = _awaitedEx$response2.data) === null || _awaitedEx$response2$ === void 0 ? void 0 : (_awaitedEx$response2$2 = _awaitedEx$response2$.status) === null || _awaitedEx$response2$2 === void 0 ? void 0 : _awaitedEx$response2$2.statusMessage;
          }
          return _context.abrupt("return", _taskJson);
        case 21:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[4, 13]]);
  }));
  return _getTask.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRUYXNrIiwicHJvcHMiLCJjbGllbnQiLCJnZXRTdGVhbXNoaXBDbGllbnQiLCJ0YXNrSWQiLCJFcnJvciIsInRhc2siLCJUYXNrIiwiY2hlY2siLCJ0YXNrSnNvbiIsInN0YXRlIiwic3RhdHVzTWVzc2FnZSIsIm91dHB1dCIsImJ1ZmYiLCJCdWZmZXIiLCJ0b1N0cmluZyIsImNvbnNvbGUiLCJsb2ciLCJhd2FpdGVkRXgiLCJyZXNwb25zZSIsImRhdGEiLCJzdGF0dXMiXSwic291cmNlcyI6WyIuLi8uLi9zcmMvZ2V0VGFzay50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZ2V0U3RlYW1zaGlwQ2xpZW50LCB7R2V0U3RlYW1zaGlwQ2xpZW50UHJvcHN9IGZyb20gXCIuL2dldFN0ZWFtc2hpcENsaWVudC5qc1wiO1xuaW1wb3J0IHtUYXNrfSBmcm9tIFwiQHN0ZWFtc2hpcC9jbGllbnRcIjtcblxuXG5leHBvcnQgaW50ZXJmYWNlIEdldFRhc2tQcm9wcyBleHRlbmRzIEdldFN0ZWFtc2hpcENsaWVudFByb3BzIHtcbiAgLy8gVGhlIHRhc2sgSUQgd2hvc2UgcmVzdWx0IHlvdSB3aXNoIHRvIGZldGNoXG4gIHRhc2tJZDogc3RyaW5nLFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIFRhc2tSZXN1bHQge1xuICB0YXNrSWQ6IHN0cmluZztcbiAgb3V0cHV0Pzogc3RyaW5nOyAvLyBCYXNlNjRcbiAgc3RhdGU6IHN0cmluZztcbiAgc3RhdHVzTWVzc2FnZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgdGFzayBpbiBwcm9ncmVzcy5cbiAqXG4gKiBAcGFyYW0gcHJvcHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgYXN5bmMgZnVuY3Rpb24gZ2V0VGFzayhwcm9wczogR2V0VGFza1Byb3BzKTogUHJvbWlzZTxUYXNrUmVzdWx0PiB7XG4gIGNvbnN0IGNsaWVudCA9IGdldFN0ZWFtc2hpcENsaWVudChwcm9wcylcblxuICBjb25zdCB7dGFza0lkfSA9IHByb3BzO1xuXG4gIGlmICghdGFza0lkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdNaXNzaW5nIHRhc2tJZCAgaW4gcHJvcHMuJylcbiAgfVxuXG4gIHRyeSB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGxldCB0YXNrID0gbmV3IFRhc2s8VD4oY2xpZW50LCB7dGFza0lkfSlcbiAgICBhd2FpdCB0YXNrLmNoZWNrKCk7XG5cbiAgICAvLyBSZXR1cm4gSlNPTiB0byB0aGUgd2ViIGNsaWVudC5cbiAgICBjb25zdCB0YXNrSnNvbiA9IHsgdGFza0lkOiB0YXNrLnRhc2tJZCB8fCB0YXNrSWQsIHN0YXRlOiB0YXNrLnN0YXRlLCBzdGF0dXNNZXNzYWdlOiB0YXNrLnN0YXR1c01lc3NhZ2UsIG91dHB1dDogdGFzay5vdXRwdXQgfVxuXG4gICAgaWYgKHRhc2tKc29uLnN0YXRlID09ICdzdWNjZWVkZWQnKSB7XG4gICAgICAvLyBPdXRwdXQgd2lsbCBiZSBCYXNlNjQgZW5jb2RlZCBzbyB0aGF0IGJpbmFyeSBpcyBhdmFpbGFibGUuXG4gICAgICB0cnkge1xuICAgICAgICBsZXQgYnVmZiA9IG5ldyBCdWZmZXIodGFza0pzb24ub3V0cHV0IGFzIGFueSwgJ2Jhc2U2NCcpO1xuICAgICAgICB0YXNrSnNvbi5vdXRwdXQgPSBidWZmLnRvU3RyaW5nKCd1dGYtOCcpOyAvLyBXZSBrbm93IGl0J3MgdXRmLTggaGVyZS5cbiAgICAgIH0gY2F0Y2gge1xuICAgICAgICBjb25zb2xlLmxvZyhcIkJhc2U2NCBkZWNvZGluZyBvZiB0YXNrIG91dHB1dCBmYWlsZWQuXCIpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0YXNrSnNvblxuICB9IGNhdGNoIChleCkge1xuXG4gICAgY29uc3QgdGFza0pzb24gPSB7IHRhc2tJZCwgc3RhdGU6ICdmYWlsZWQnLCBzdGF0dXNNZXNzYWdlOiAnQW4gdW5leHBlY3RlZCBlcnJvciBoYXBwZW5lZC4nfVxuXG4gICAgY29uc3QgYXdhaXRlZEV4ID0gKGF3YWl0IGV4KSBhcyBhbnk7XG5cbiAgICBpZiAoYXdhaXRlZEV4Py5yZXNwb25zZT8uZGF0YT8uc3RhdHVzPy5zdGF0dXNNZXNzYWdlKSB7XG4gICAgICB0YXNrSnNvbi5zdGF0dXNNZXNzYWdlID0gYXdhaXRlZEV4Py5yZXNwb25zZT8uZGF0YT8uc3RhdHVzPy5zdGF0dXNNZXNzYWdlO1xuICAgIH1cblxuICAgIHJldHVybiB0YXNrSnNvblxuICB9XG59XG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ0E7QUFlQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBSkEsU0FLOEJBLE9BQU87RUFBQTtBQUFBO0FBQUE7RUFBQSx5RkFBdEIsaUJBQXVCQyxLQUFtQjtJQUFBO0lBQUE7TUFBQTtRQUFBO1VBQ2pEQyxNQUFNLEdBQUcsSUFBQUMsOEJBQWtCLEVBQUNGLEtBQUssQ0FBQztVQUVqQ0csTUFBTSxHQUFJSCxLQUFLLENBQWZHLE1BQU07VUFBQSxJQUVSQSxNQUFNO1lBQUE7WUFBQTtVQUFBO1VBQUEsTUFDSCxJQUFJQyxLQUFLLENBQUMsMkJBQTJCLENBQUM7UUFBQTtVQUFBO1VBSTVDO1VBQ0lDLElBQUksR0FBRyxJQUFJQyxZQUFJLENBQUlMLE1BQU0sRUFBRTtZQUFDRSxNQUFNLEVBQU5BO1VBQU0sQ0FBQyxDQUFDO1VBQUE7VUFBQSxPQUNsQ0UsSUFBSSxDQUFDRSxLQUFLLEVBQUU7UUFBQTtVQUVsQjtVQUNNQyxRQUFRLEdBQUc7WUFBRUwsTUFBTSxFQUFFRSxJQUFJLENBQUNGLE1BQU0sSUFBSUEsTUFBTTtZQUFFTSxLQUFLLEVBQUVKLElBQUksQ0FBQ0ksS0FBSztZQUFFQyxhQUFhLEVBQUVMLElBQUksQ0FBQ0ssYUFBYTtZQUFFQyxNQUFNLEVBQUVOLElBQUksQ0FBQ007VUFBTyxDQUFDO1VBRTdILElBQUlILFFBQVEsQ0FBQ0MsS0FBSyxJQUFJLFdBQVcsRUFBRTtZQUNqQztZQUNBLElBQUk7Y0FDRUcsSUFBSSxHQUFHLElBQUlDLE1BQU0sQ0FBQ0wsUUFBUSxDQUFDRyxNQUFNLEVBQVMsUUFBUSxDQUFDO2NBQ3ZESCxRQUFRLENBQUNHLE1BQU0sR0FBR0MsSUFBSSxDQUFDRSxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztZQUM1QyxDQUFDLENBQUMsZ0JBQU07Y0FDTkMsT0FBTyxDQUFDQyxHQUFHLENBQUMsd0NBQXdDLENBQUM7WUFDdkQ7VUFDRjtVQUFDLGlDQUNNUixRQUFRO1FBQUE7VUFBQTtVQUFBO1VBR1RBLFNBQVEsR0FBRztZQUFFTCxNQUFNLEVBQU5BLE1BQU07WUFBRU0sS0FBSyxFQUFFLFFBQVE7WUFBRUMsYUFBYSxFQUFFO1VBQStCLENBQUM7VUFBQTtVQUFBO1FBQUE7VUFFckZPLFNBQVM7VUFFZixJQUFJQSxTQUFTLGFBQVRBLFNBQVMsc0NBQVRBLFNBQVMsQ0FBRUMsUUFBUSx5RUFBbkIsb0JBQXFCQyxJQUFJLDRFQUF6QixzQkFBMkJDLE1BQU0sbURBQWpDLHVCQUFtQ1YsYUFBYSxFQUFFO1lBQ3BERixTQUFRLENBQUNFLGFBQWEsR0FBR08sU0FBUyxhQUFUQSxTQUFTLCtDQUFUQSxTQUFTLENBQUVDLFFBQVEsa0ZBQW5CLHFCQUFxQkMsSUFBSSxvRkFBekIsc0JBQTJCQyxNQUFNLDJEQUFqQyx1QkFBbUNWLGFBQWE7VUFDM0U7VUFBQyxpQ0FFTUYsU0FBUTtRQUFBO1FBQUE7VUFBQTtNQUFBO0lBQUE7RUFBQSxDQUVsQjtFQUFBO0FBQUEifQ==