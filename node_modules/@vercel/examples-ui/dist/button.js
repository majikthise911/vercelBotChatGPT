import _extends from "@swc/helpers/src/_extends.mjs";
import _object_without_properties_loose from "@swc/helpers/src/_object_without_properties_loose.mjs";
import { jsx as _jsx } from "react/jsx-runtime";
import cn from 'clsx';
import LoadingDots from './loading-dots.js';
const variants = {
    primary: 'text-background bg-success border-success-dark hover:bg-success/90 shadow-[0_5px_10px_rgb(0,68,255,0.12)]',
    ghost: 'text-success hover:bg-[rgba(0,68,255,0.06)]',
    secondary: 'text-accents-5 bg-background border-accents-2 hover:border-foreground hover:text-foreground',
    black: 'bg-foreground text-background border-foreground hover:bg-background hover:text-foreground',
    white: 'bg-background text-foreground border-background hover:bg-accents-1',
    violet: 'text-background bg-violet border-violet-dark hover:bg-[#7123be]'
};
const sizes = {
    sm: 'h-8 leading-3 text-sm px-1.5 py-3',
    md: 'h-10 leading-10 text-[15px]',
    lg: 'h-12 leading-12 text-[17px]'
};
const Button = (props)=>{
    const { width , active , children , variant ='primary' , Component ='button' , loading =false , style ={} , size ='md' , className  } = props, rest = _object_without_properties_loose(props, [
        "width",
        "active",
        "children",
        "variant",
        "Component",
        "loading",
        "style",
        "size",
        "className"
    ]);
    const rootClassName = cn('relative inline-flex items-center justify-center cursor pointer no-underline px-3.5 rounded-md', 'font-medium outline-0 select-none align-middle whitespace-nowrap', 'transition-colors ease-in duration-200', variant !== 'ghost' && 'border border-solid', variants[variant], sizes[size], {
        'cursor-not-allowed': loading
    }, className);
    return /*#__PURE__*/ _jsx(Component, _extends({
        "aria-pressed": active,
        "data-variant": variant,
        className: rootClassName,
        style: _extends({
            width
        }, style)
    }, rest, {
        children: loading ? /*#__PURE__*/ _jsx("i", {
            className: "m-0 flex",
            children: /*#__PURE__*/ _jsx(LoadingDots, {})
        }) : children
    }));
};
// Our Button component is built thinking of it as a button,
// but it can also be used as a link and include the anchor props
export default Button;
